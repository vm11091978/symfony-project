security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\User
                property: login
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            # если текущий пользователь не имеет прав на какое-то действие, обработаем это исключение
            access_denied_handler: App\Security\AccessDeniedHandler

            lazy: true
            # provider: users_in_memory
            provider: app_user_provider

            form_login:
                # "app_login" - это имя ранее созданного маршрута
                login_path: app_login
                check_path: app_login
                # подключим защиту от CSRF-атак входа
                enable_csrf: true
                # на какую страницу перенаправлять после входа
                default_target_path: app_article_index

            logout:
                path: app_logout
                # куда перенаправлять после выхода (по умолчанию - главная страница)
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/article, roles: ROLE_AUTH_USER }
        - { path: ^/category, roles: ROLE_AUTH_USER }
        - { path: ^/subcategory, roles: ROLE_AUTH_USER }
        - { path: ^/user, roles: ROLE_ADMIN }

    # The ROLE_ADMIN role inherits from the ROLE_USER role
    role_hierarchy:
        ROLE_ADMIN: ROLE_AUTH_USER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
